<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cpt\PublicationBundle\Entity;

use Cpt\PublicationBundle\Interfaces\Entity\CommentInterface as CommentInterface;
use Cpt\PublicationBundle\Interfaces\Entity\PublicationInterface as PublicationInterface;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class Comment implements CommentInterface
{
    public function toViewArray()
    {
    return Array(
        "id" => $this->getId(),
        "authorname" => $this->getAuthor()->getDisplayName(),
        "canmodify" => $this->getCanModify(),
        "message" => $this->getMessage(),
        "createdat" => $this->getCreatedAt()->format('d/m/Y  H:i'),
        "updatedat" => $this->getUpdatedAt(),
        "commentableid" =>  $this->getCommentable()->getId(),
        );
    }
    
    /**
     * @var integer $id
     */
    protected $id;

    protected $author;
    
    protected $canModify = false; // non-mapped field
    
    
    protected $message;

    protected $createdAt;

    protected $updatedAt;

    protected $status = self::STATUS_VALID;

    protected $publication;
    
        /**
     * {@inheritdoc}
     */
    public function setAuthor($author)
    {
        $this->author = $author;
    }

    /**
     * {@inheritdoc}
     */
    public function getAuthor()
    {
        return $this->author;
    }
    
    /**
     * Get id
     *
     * @return integer $id
     */
    public function getId()
    {
        return $this->id;
    }
    
  
    
    public function setCanModify($value)
    {
        $this->canModify = $value;
    }
    
    public function getCanModify()
    {
        return $this->canModify;
    }
    
    public function prePersist()
    {
        $this->setCreatedAt(new \DateTime);
        $this->setUpdatedAt(new \DateTime);
    }
    

    /**
     * {@inheritdoc}
     */
    public function setMessage($message)
    {
        $this->message = $message;
    }

    /**
     * {@inheritdoc}
     */
    public function getMessage()
    {
        return $this->message;
    }

    /**
     * {@inheritdoc}
     */
    public function setCreatedAt(\DateTime $createdAt = null)
    {
        $this->createdAt = $createdAt;
    }

    /**
     * {@inheritdoc}
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * {@inheritdoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt = null)
    {
        $this->updatedAt = $updatedAt;
    }

    /**
     * {@inheritdoc}
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    /**
     * {@inheritdoc}
     */
    public static function getStatusList()
    {
        return array(
            self::STATUS_MODERATE => 'moderate',
            self::STATUS_INVALID => 'invalid',
            self::STATUS_VALID   => 'valid',
        );
    }

    /**
     * {@inheritdoc}
     */
    public function getStatusCode()
    {
        $status = self::getStatusList();

        return isset($status[$this->getStatus()]) ? $status[$this->getStatus()] : null;
    }

    public function preUpdate()
    {
        $this->setUpdatedAt(new \DateTime);
    }

    /**
     * {@inheritdoc}
     */
    public function setStatus($status)
    {
        $this->status = $status;
    }

    /**
     * {@inheritdoc}
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * {@inheritdoc}
     */
    public function setPublication(PublicationInterface $publication)
    {
        $this->commentable = $publication;
    }

    /**
     * {@inheritdoc}
     */
    public function getPublication()
    {
        return $this->commentable;
    }

    /**
     * {@inheritdoc}
     */
    public function __toString()
    {
        return $this->getMessage() ?: 'n-a';
    }
    
      public function areCommentAndCommentableAuthorSame()
    {
        $commentAuthor = $this->getAuthor();
        $commentableAuthor = $this->getCommentable()->getAuthor();
        
        if ((!$commentAuthor)||(!$commentableAuthor))
            return false;
        
        return ($commentAuthor->getId() == $commentableAuthor->getId());
    }
}