<script type="text/javascript">
const FILTER_ALLEVENTS = 'allevents';
const FILTER_MYEVENTS = 'myevents';
const FILTER_PASTEVENTS = 'pastevents';

var event_list = null;

var ajaxUpdateTimer = null; {# used to delay ajax request to update calendar, selector, and event. If users scolls fast, the request will not be sent #}
var current_month = {{month}};
var current_year = {{year}};
var count_retreived_event = 0;
var calendarjqXHR = null; {# ajax requeset XHR, used to abort the request when switching from one month to the other #}
var EventlistjqXHR = null;
var UpdateArrowjqXHR = null;
var EventviewjqXHR = []; {# will store the XHR in an array #}
var event_filter_value = FILTER_ALLEVENTS; {# 1: all, 2: myevents, 3: pastevents #}

var month_names = new Array();
month_names[1] = "{{'january'|trans}}";
month_names[2] = "{{'february'|trans}}";
month_names[3] = "{{'march'|trans}}";
month_names[4] = "{{'april'|trans}}";
month_names[5] = "{{'may'|trans}}";
month_names[6] = "{{'june'|trans}}";
month_names[7] = "{{'july'|trans}}";
month_names[8] = "{{'august'|trans}}";
month_names[9] = "{{'september'|trans}}";
month_names[10] = "{{'october'|trans}}";
month_names[11] = "{{'november'|trans}}";
month_names[12] = "{{'december'|trans}}";

{#****************************************************************************#}
{# Switches event filter
{#  1: all, 2: my events, 3: past events
{#****************************************************************************#}
function Set_filter_events(value)
{
    event_filter_value = value;
    
    $("#events_filter_all").toggleClass("cpt_blue", value === FILTER_ALLEVENTS);
    $("#events_filter_myevents").toggleClass("cpt_blue", value === FILTER_MYEVENTS);
    $("#events_filter_pastevents").toggleClass("cpt_blue", value === FILTER_PASTEVENTS);
    
    $("#events_filter_all").toggleClass("cpt_grey", value !== FILTER_ALLEVENTS);
    $("#events_filter_myevents").toggleClass("cpt_grey", value !== FILTER_MYEVENTS);
    $("#events_filter_pastevents").toggleClass("cpt_grey", value !== FILTER_PASTEVENTS);

}
{#**************************************************************************#}
{# Load and display popup to manage an event
{#**************************************************************************#}
function manage_event(id)
{
    $("#popup_new_event").load(Routing.generate('event_manage', {id:id,_locale:_locale}));
    $("#popup_new_event").show();
    DisplayOpacityMask(true);
}
{#**************************************************************************#}
{# Close the manage event popup
{#**************************************************************************#}
function close_manage_event()
{
    $("#popup_new_event").hide();
    DisplayOpacityMask(false);
}
{#**************************************************************************#}
{# Toggle visibility of event container
{#**************************************************************************#}
function toggle_event_container(visible)
{
    if (visible){
        $('#loading_event').hide();
        $('#eventcontainer').show();
    } else {
        $('#eventcontainer').hide(); {# clear the event list container #}
        $('#loading_event').show();
    }
}
{#**************************************************************************#}
{# Retreives the html view of an event from server
{#**************************************************************************#}
function retrieveEventView(id)
{
    {# Removes existing container for this event, if any #}
    $('#eventcontainer'+id).remove();
    
    {# Creates the DOM container (Div element) #}           
    jQuery('<div>', {
        id: 'eventcontainer'+id,
        class: 'eventcontainer'
    }).appendTo('#eventcontainer');


    {# Retreive the event view from server and add it to previously created DOM element #}
    EventviewjqXHR.push( $.get( Routing.generate('event_view', {id:id,_locale:_locale}), function(response){
          if (response.status === "ok")
          {
             $( "#eventcontainer" + id ).html( response.data );
             count_retreived_event++;
             
             if (count_retreived_event === event_list.length){
                 toggle_event_container(true);
             }
          }
     }));
}
{#**************************************************************************#}
{# Toggles event with given id, close all others
{#**************************************************************************#}
function event_content_accordion_toggle(id)
{
    visible = $("#event_content"+id).is(":visible");

    for(i=0;i<event_list.length;++i) {
        if (event_list[i].id !== id){
         event_content_toggle(event_list[i].id,false);
        }
    }
    event_content_toggle(id,!visible);
}
{#**************************************************************************#}
{# Toggle a single event cotent
{#**************************************************************************#}
function event_content_toggle(id,open)
{
    {# toggles readless <=> readmore text #}
    open ? $("#event_readmore_btn"+id).html("{{'event.readless'|trans}}") : $("#event_readmore_btn"+id).html("{{'event.readmore'|trans}}");

    if (open){
        $('#event_content'+id).slideDown(500);
    } else {
        $('#event_content'+id).slideUp(500);        
    }
}
{#**************************************************************************#}
{# Updates the month selector arrow
{#**************************************************************************#}
function update_arrows(year,month)
{
    abort_ajax(UpdateArrowjqXHR);
    UpdateArrowjqXHR = $.getJSON( Routing.generate('event_get_calendar_arrow_type', {year:year,month:month,_locale:_locale}), function(response){
        {# Ensure that received response matches with current month and year#}
        if ((response.data.month != current_month)||(response.data.year != current_year)){
            return; {# Mismatch #}
         }
            
        if (response.data.is_eventbefore){
            if (response.data.is_myeventbefore) {
                $("#monthselector_uparrow").attr("class","calendar_arrow_up_myevents_btn");
            } else {
                $("#monthselector_uparrow").attr("class","calendar_arrow_up_withevents_btn");
            }
        } else {
            $("#monthselector_uparrow").attr("class","calendar_arrow_up_withoutevents_btn");
        }
        if (response.data.is_eventafter){
            if (response.data.is_myeventafter) {
                $("#monthselector_downarrow").attr("class","calendar_arrow_down_myevents_btn");
            } else {
                $("#monthselector_downarrow").attr("class","calendar_arrow_down_withevents_btn");
            }
        } else {
            $("#monthselector_downarrow").attr("class","calendar_arrow_down_withoutevents_btn");
        }
    });
}
{#**************************************************************************#}
{# Go to next month
{#**************************************************************************#}
function next_month()
{
    current_month ++;
    if (current_month>12){
        current_month = 1;
        current_year++;
    }
    
    UpdateEventInterface();
}
{#**************************************************************************#}
{# Go to previous month
{#**************************************************************************#}
function previous_month()
{
    current_month --;
    if (current_month<1){
        current_month = 12;
        current_year--;
    }
    
    UpdateEventInterface();
}
{#**************************************************************************#}
{# Updates the month selector with current month and year
{#**************************************************************************#}
function UpdateSelectorDate()
{
    $('#monthselector_month').html(month_names[current_month]);
    $('#monthselector_year').html(current_year);
}
{#**************************************************************************#}
{# Load the calendar for current month and year
{#**************************************************************************#}
function LoadCalendar(year,month)
{ 
    if (calendarjqXHR && calendarjqXHR.readystate !== 4){ {# Abort any previously sent ajax request. readystate 4 = DONE  #}
        calendarjqXHR.abort();
    }
   
    calendarjqXHR = $.get(Routing.generate('event_view_calendar', {year:year,month:month,_locale:_locale}),function(data){
        $('#calendar').html(data);
    });
}
{#**************************************************************************#}
{# Retreives a list of events from server
{#**************************************************************************#}
function RetrieveEvents(year,month)
{
    {# abort any previously sent ajax requests #}
    abort_ajax(EventlistjqXHR);
    
    {# also abort the ajax request to retreive event view #}
    EventviewjqXHR.forEach(function(jqXHR){abort_ajax(jqXHR);});
    EventviewjqXHR = [];
    
    EventlistjqXHR = $.getJSON( Routing.generate('event_get_events_for_month', {year:year, month:month,_locale:_locale}),{filter:event_filter_value}, function(response){
      
      $('#eventcontainer').html('');
      toggle_event_container(false);
      count_retreived_event = 0;
      
      if (response.status === "ok")
      {         
        event_list = $.parseJSON(response.data).events;

        for(i=0;i<event_list.length;++i) {
            retrieveEventView(event_list[i].id);
        }
        
        if (event_list.length === 0) {
            $('#eventcontainer').html("{{'event.noevent_todisplay'|trans }}");
            toggle_event_container(true);
        }
            
      }
  });
}

function UpdateEventInterface()
{
    UpdateSelectorDate();
    
    if (ajaxUpdateTimer)
        clearTimeout(ajaxUpdateTimer);
    
    ajaxUpdateTimer = setTimeout(function(){
        update_arrows(current_year,current_month);            
        LoadCalendar(current_year, current_month);
        RetrieveEvents(current_year,current_month);
    },{{ update_ajax_delay }});
}
{#**************************************************************************#}
{# Onload
{#**************************************************************************#}
$(function() {
    Set_filter_events(FILTER_ALLEVENTS);
    UpdateEventInterface();
});
</script>