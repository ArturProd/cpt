{% set queue_list_template = include('CptEventBundle:Event:ParticipantListQueue.html.twig') %}
{% set reservation_list_row_template = include('CptEventBundle:Event:ParticipantListRow.html.twig') %}

{# Loads the google API async and call back "load google map api"#}
<script>
{# ************************************************************************************************************************ #} 
{# Global variables initialization
{# ************************************************************************************************************************ #} 
    var Registration_list = {};         {# the list that contains the registration objects #}
    var Total_number_participant = 0;   {# total number of participants of the event #}
    var Max_number_participant = 0;     {# maximum number of participants of the event #}
    var Count_organizer = 0;            {# total number of organizers in the event #}
    var Queue = [{{ event.queue|join(',') }}]; {# contains the event.queue in the form of comma separated values #}
    var Disabled_organizer_user = null; {# Id of the organizer which was disabled (due to the fact there is just one organizer left) #}
    var EVENT_EDIT_CKEDITOR_READY_TIMEOUT = {{ CKEDITOR_READY_TIMEOUT }}

function InitRegistrations()
{
    {############################################}
    {# Reset variables #}
        Registration_list = {};         {# the list that contains the registration objects #}
        Total_number_participant = 0;   {# total number of participants of the event #}
        Max_number_participant = 0;     {# maximum number of participants of the event #}
        Count_organizer = 0;            {# total number of organizers in the event #}
        Queue = [{{ event.queue|join(',') }}]; {# contains the event.queue in the form of comma separated values #}
        Disabled_organizer_user = null; {# Id of the organizer which was disabled (due to the fact there is just one organizer left) #}

   {############################################}
   {# Adding existing reservations to the list #} 
    var integrity_check_numpart = 0;
    {% for registration in event.registrations %}
        reservation_existing = CreateReservationItem({{  registration.id }}, {{ registration.user.id }}, {{ event.id }}, '{{ registration.user.username }}', {{ registration.numparticipant }}, {{ registration.numqueuedparticipant }}, {{ registration.organizer ? 1 : 0 }}, {{ registration.createdAt|date('U') }});
        AddReservationItem(reservation_existing, true);
        integrity_check_numpart += {{ registration.numparticipant }};
    {% endfor %}

    if (integrity_check_numpart != Queue.length ){
        alert("An error occured.")
    }
    
    UpdateInterface();
}
  
{# ************************************************************************************************************************ #} 
{# updates the interface (Never call unless the Queue and RegistrationList are initialized and match!)
{# ************************************************************************************************************************ #}     
function UpdateInterface()
{

    UpdateNumQueuedParticipant();

    {# Clear search field #}
    $( "#user_search" ).value = "";
    
    count_orga_notqueued = 0;
    last_orga_user = -1;
    Total_number_participant = 0;
    for (userid in Registration_list) {
        registration = Registration_list[userid];
        {# update queued attendees count label #}
        $("#resa_queued_att_" + registration.user).html(registration.numqueuedparticipants);

        {# Counts the number of organizer which are not queued to later disable/enable the organizer checkbox #}
         if ( ($( "#resa_organizer_" + registration.user ).is(':checked')) && (!registration.fullqueued))
         {
             count_orga_notqueued ++;
             last_orga_user = registration.user;
         }
         {# updates global counters #}
         Total_number_participant += registration.numparticipants;
         Count_organizer += registration.organizer ? 1 : 0;
    };
    
    {# update the organizer checkboxes #}
    if (count_orga_notqueued  === 1)
    {   
        $("#resa_organizer_" + last_orga_user).prop('disabled', true);
        $("#remove_button_" + last_orga_user).prop('disabled', true);
        Disabled_organizer_user = last_orga_user;
    } else if (Disabled_organizer_user !== null) {
        $("#resa_organizer_" + Disabled_organizer_user).prop('disabled', false);
        $("#remove_button_" + Disabled_organizer_user).prop('disabled', false);
        Disabled_organizer_user = null;
    }
    
    {# Make sure event author cannot delete his registration #}
    $("#remove_button_" + {{event.author.id}}).prop('disabled', true);

    {# update attendees queue table #}
    index = 0;
    $( "#queue_table_body" ).empty();
    Queue.forEach(function(user_id) {
        reservation = Registration_list[user_id];
        waiting_queue = (index >= Max_number_participant) ? "oui" : "non";
        $( "#queue_table_body" ).append( "{{ queue_list_template|jsstring|raw }}" );
        index++;
    });

 }

{# ************************************************************************************************************************ #}  
{# Creates a reservation item based on parameters #}
{# ************************************************************************************************************************ #}     
function CreateReservationItem(id, user, event, username, numparticipants, numqueuedparticipants, organizer, createdAt)
{
    var reservation = new Object();
    reservation.id = -1;
    reservation.user = user;
    reservation.event = event;
    reservation.username = username;  
    reservation.numparticipants = numparticipants; 
    reservation.numqueuedparticipants = numqueuedparticipants;
    reservation.createdAt = createdAt;
    reservation.organizer= organizer;
    reservation.fullqueued = (numparticipants === numqueuedparticipants);
    
    return reservation;
}

{# ************************************************************************************************************************ #} 
{# Handles the changes of the maximum number of participants (Max_number_participant variable) #}
{# ************************************************************************************************************************ #} 
function UpdateMaxNumberParticipant()
{
     {# update the maximum number of participant according to the widget #}
     raw_value = $('#event_maxnumattendees').val();

     var value = parseInt($('#event_maxnumattendees').val());
     
    if (isNaN(value)) {# check if a number was entered #}
    {
        ModalDialog(null, null, "{{'form.not_valid_number.title'|trans}}", "{{'form.not_valid_number.content'|trans|raw}}", "{{'form.ok'|trans}}");
        $('#event_maxnumattendees').val(Max_number_participant);
    }
    else
    {
        Max_number_participant = value;
    }
}

{# ************************************************************************************************************************ #} 
{# Updates the number of queued participants and fullqueued attribute for the registration objects in the Registration_list #}
{# ************************************************************************************************************************ #} 
function UpdateNumQueuedParticipant()
{
   UpdateMaxNumberParticipant();
            
    waiting_queue = Array();
    for (var i=Max_number_participant; i<Queue.length; ++i)
        waiting_queue.push(Queue[i]);
    {# Resetting the number of queued attendees #}
    for (userid in Registration_list) {
        Registration_list[userid].numqueuedparticipants = 0;
        Registration_list[userid].fullqueued = false;
    };
    
    {# counting queued participants #}
    waiting_queue.forEach(function(user_id) {
        Registration_list[user_id].numqueuedparticipants++;
        if (Registration_list[user_id].numqueuedparticipants === Registration_list[user_id].numparticipants)
            Registration_list[user_id].fullqueued = true;
    });
}

{# ************************************************************************************************************************ #} 
{# handler when changing the number of attendee of a reservation 
    parameter reservation must have the former number of attendees (unchanged) #}
{# ************************************************************************************************************************ #}     
function ChangeNumAttendees(reservation, new_num_attendee)
{    
        old_numparticipants = Registration_list[reservation.user].numparticipants;
        Registration_list[reservation.user].numparticipants = new_num_attendee;

        {# Updating the Queue #}
        if (new_num_attendee > old_numparticipants) { {# in this case, new attendees are pushed at the end of the Queue #}
            for (var i = 0; i < (new_num_attendee - old_numparticipants) ; i++) {
              Queue.push(reservation.user);
         
            };
        }
        else if (new_num_attendee < old_numparticipants) { {# in this case, need to remove attendees starting by the end of the Queue #}
            counter =  old_numparticipants - new_num_attendee; {# number of attendees to remove #}
    
            for (var i = Queue.length - 1 ; (counter > 0) && (i>=0) ; i--) {
              if (Queue[i] === reservation.user)
              {
                Queue.splice(i,1);
                counter--;
              }
              if (counter<0) { alert('An internal error occured when updating the attendees Queue. (counter < 0 )'); }
            };
            
            if (counter > 0) { alert('An internal error occured when updating the attendees Queue. (counter > 0 )'); }

        }
        
        UpdateInterface();
}

{# ************************************************************************************************************************ #} 
{# Add a row to the reservation table based on a reservation object #}
{# ************************************************************************************************************************ #} 
function AddRowToTable(reservation)
{
        {# append a line to the table, using the javascript reservation object defined in this AddeservationItem function #}
        $( "#reservation_table" ).append( "{{ reservation_list_row_template|jsstring|raw }}" );
        
        {# set the registration organizer default value #}
        if (reservation.organizer)
            $( "#resa_organizer_" + reservation.user ).attr("checked",true);
        else
            $( "#resa_organizer_" + reservation.user ).removeAttr("checked"); 
        
        {# bind change event of numparticipant control to the handler #}
        $( "#resa_num_att_" + reservation.user ).on("change", function(event){
            
            var raw_value = $(this).val();
            var value = parseInt(raw_value );
            if (isNaN(value)) {# check if a number was entered #}
            {   
                ModalDialog(null, null, "{{'form.not_valid_number.title'|trans}}", "{{'form.not_valid_number.content'|trans|raw}}", "{{'form.ok'|trans}}");
                $(this).val(reservation.numparticipants);
            } 
            else 
            {
                ChangeNumAttendees(reservation , value );
            }
          });
          
        {# bind change event of organizer control to the handler #}
        $( "#resa_organizer_" + reservation.user ).on("change", function(event){
            checked = ($(this).is(':checked'));
            reservation.organizer = checked ? 1 : 0;
            UpdateInterface();
        });
}

{# ************************************************************************************************************************ #} 
{# Creates a reservation object based on a user #}
{# ************************************************************************************************************************ #} 
 function CreateReservationFromUser(user)
 {
     {# Math.round(new Date().getTime() / 1000)  ===> UNIX TimeStamp (same as twig filter |date('U') #}
     return CreateReservationItem(-1 , user.id, {{ event.id }}, user.username, 1 , 0 , 0, Math.round(new Date().getTime() / 1000) );
 }
 
{# ************************************************************************************************************************ #} 
{# Add a newly created reservation item in the reservation_list, created from the given user 
{# already_in_queue: if false, will update the Queue. if true (like for the already existing users added), the Queue will not be updated
{# ************************************************************************************************************************ #} 
function AddReservationItem(reservation,already_in_queue)
{
    if (!(reservation.user in Registration_list))
    {    
         Registration_list[reservation.user] = reservation;
        {# 
            if not already in queue, just need to add it at the end of the queue
            if it is already in queue (for initialization with existing queue and existing regitrations), no need to do anything
        #}
        if (!already_in_queue)
        {
            for (var i = 0; i < reservation.numparticipants; i++) {
              Queue.push(reservation.user);
            };
        }

        AddRowToTable(reservation);

        return reservation;
    }

    // The user was already in the participant list
    else alert('User is already in the list');  
    return null; 
}

{# ************************************************************************************************************************ #} 
{# Removes a all ids from a users from the queue #}
{# ************************************************************************************************************************ #} 
function RemoveUserIdFromQueue(user_id)
{
    {# Removing all occurence of this event from the Queue #}
    Queue = jQuery.grep(Queue, function(n) {
      return n !== user_id;   
    });
}


{# ************************************************************************************************************************ #} 
{# Removes a reservation from the Registration_list and update the Queue
{# ************************************************************************************************************************ #} 
function RemoveReservationItem( user_id )
{
    if (user_id in Registration_list){
        delete Registration_list[user_id];             {# delete from participant list #}
        $( "#reserv_list_row_"+  user_id ).remove();  {# remove row from the table #}
        
        RemoveUserIdFromQueue(user_id);        
        
        UpdateInterface();
    }
}

{# ************************************************************************************************************************ #} 
{# Handler for disabling the registration system
{# ************************************************************************************************************************ #} 
function HandleRegistrationAllowed(value)
{
    if (value) {# confirmation that reservations should be disabled #}
    {
            $("#tabs").tabs({disabled: [2]});
            $( "#event_registration_allowed" ).attr("checked",false);
    }
}

{# ************************************************************************************************************************ #} 
{# Prepare form for submission
{# ************************************************************************************************************************ #} 
function PrepareEventFormSubmission()
{
    $('#event_queue_json').val(JSON.stringify(Queue));                      {# insert the json queue in the field #}
    $('#registration_list_json').val(JSON.stringify(Registration_list));    {# insert the json registration list in the field #}
    CKEDITOR.instances['event_content'].updateElement();                {# update the entity field with CKEDIOR content #}
}

{# ************************************************************************************************************************ #} 
{# Checks at regular interval if the event was updated (new registrations..)
{# ************************************************************************************************************************ #} 
function CheckEventWasUpdated() {
    {% if event.id != -1 %}  
        var jqXHR = $.getJSON('{{ url('event_was_updated', { 'id': event.id, 'unixtimestamp': event.UpdatedAt | date('U') })  }}', function(data) {
            wasupdated = JSON.parse(data);
            if (wasupdated)
                ModalDialog(ReLoadEvent, null, "{{'event.changes_detected.title'|trans}}", "{{'event.changes_detected.content'|trans|raw}}", "{{'form.ok'|trans}}");
            else {
             var timeout = setTimeout("CheckEventWasUpdated()",15000);
             registerTimer(timeout);
            }
        });
        
        registerJqXHR(jqXHR);
    {% endif %}
}

{# ************************************************************************************************************************ #} 
{# Reloads the current event from db
{# ************************************************************************************************************************ #} 
function ReLoadEvent()
{
    $("#edit_event").load("{{ url('event_manage', { 'id': event.id })}}");
}

{# ************************************************************************************************************************ #} 
{# Check coherence of begin and end date
{# ************************************************************************************************************************ #} 
function EventDateTimeChanged()
{
    today = (new Date()).toISOString();
    todaydate = today.split('T')[0];
    $('#event_begin_date').attr('min',todaydate); {# set min value for begin date to be the same as today #}
    $('#event_end_date').attr('min',$('#event_begin_date').val()); {# set min value for end date to be the same as begin date #}
    
    datefrom = $('#event_begin_date').val();
    datefromarray = datefrom.split('-');
    
    dateto = $('#event_end_date').val();
    datetoarray = dateto.split('-');
    
    datefrom = new Date(datefromarray[0],datefromarray[1],datefromarray[2],$('#event_begin_time_hour').val(),$('#event_begin_time_minute').val()); 
    dateto = new Date(datetoarray[0],datetoarray[1],datetoarray[2],$('#event_end_time_hour').val(),$('#event_end_time_minute').val());
    
    if (dateto<datefrom){
        //$('#error_dateevent').html('{{'event.error.dateevent'|trans}}');
        $('#event_end_date').val($('#event_begin_date').val());
        $('#event_end_time_hour').val(23);
        $('#event_end_time_minute').val(59);
    }
    
    datefrom = $('#event_begin_date').val();
    datefromarray = datefrom.split('-');
    
    dateto = $('#event_end_date').val();
    datetoarray = dateto.split('-');
    
    datefrom = new Date(datefromarray[0],datefromarray[1],datefromarray[2],$('#event_begin_time_hour').val(),$('#event_begin_time_minute').val()); 
    dateto = new Date(datetoarray[0],datetoarray[1],datetoarray[2],$('#event_end_time_hour').val(),$('#event_end_time_minute').val());
    
    
    diff = dateto.getTime() - datefrom.getTime();
    
    days = Math.floor(diff / (1000 * 60 * 60 * 24));
    diff -=  days * (1000 * 60 * 60 * 24);

    hours = Math.floor(diff / (1000 * 60 * 60));
    diff -= hours * (1000 * 60 * 60);

    mins = Math.floor(diff / (1000 * 60));
    
    s = "{{'event.timespan.duration'|trans}} " + 
        days + " {{'event.timespan.days'|trans}} "
        + hours + " {{'event.timespan.hours'|trans}} " 
        + mins + " {{'event.timespan.mins'|trans}}";

    $('#event_timespan').html(s);

}

{# ************************************************************************************************************************ #} 
{# Set the current address
{# ************************************************************************************************************************ #}    
function set_adress(address_num,address,postal_code,city_name,country_name,country_code )
{
        {# build the address string #}
        var address_string = "";
        address_string += address_num ? address_num + " " : "" ;
        address_string += address ?  address + " " : "";
        address_string += postal_code ? postal_code + " " : "";
        address_string += city_name ? city_name + " " : "";
        address_string += country_name ? country_name : "";
        
        {# set the fields #}       
        $('#address_num').attr('value',address_num);
        $('#address').attr('value',address);
        $('#country_name').attr('value',country_name);
        $('#country_code').attr('value',country_code);
        $('#city_postal_code').attr('value',postal_code);
        $('#city_name').attr('value',city_name);
        
        {# Clear search box #}
        $('#placesearch').val('');
}

{#***********************************************#}
{# Callback after Save the current event
{#***********************************************#}
function save_event_callback(response)
{
    if (response.status==="ok")
    {
        UpdateEventInterface();
        //DisplayEventEditPanel(false);
        ShowPage(PAGE_EVENT)
        show_event_usermessage('{{'event.save.eventwassaved'|trans}}');
    }
    else {# can be failed or "copy" in case the event was copied #}
    {
     $("#edit_event").html(response.data);
     if (response.status==="copy"){
        show_event_usermessage('{{'event.copy.eventwascopied'|trans}}');
     } else {
        show_event_usermessage('{{'event.edit.formcontainserror'|trans}}');
     }
    }
}

{#***********************************************#}
{# Callback after Save the current event
{#***********************************************#}
function cancel_event_callback(response)
{
    if (response.status==="ok")
    {
        UpdateEventInterface();
        // DisplayEventEditPanel(false);
        ShowPage(PAGE_EVENT)
        show_event_usermessage('{{'event.cancel.eventwascancelled'|trans}}');
    }
    else {# can be failed or "copy" in case the event was copied #}
    {
        alert('An error occured when cancelling this event');
    }
}

{#***********************************************#}
{# Cancels the event
{#***********************************************#}
function cancel_event(areyousure)
{
    if (areyousure){
        $.ajax({
          type        : 'DELETE',
          url         : Routing.generate('event_cancel', {id:{{ event.id }},_locale:_locale}),
          success     : function(data) {
            cancel_event_callback( data );
          }
        });
    }
}

{#***********************************************#}
{# Hides the copy button
{#***********************************************#}
function HideCopyButton()
{
    $('#copy_button').off();
    $('#copy_button').fadeOut(2000);
}


{# ************************************************************************************************************************ #} 
{# Initialize the page
{# ************************************************************************************************************************ #} 
function InitializeEventPage()
{
        {###################################################}
        {# Initialize CKEDITOR when it is loaded #}
        CKEDITOR.on('instanceReady', function (e) {
            if(e.editor.name == "event_content"){
                CKEDITOR.instances['event_content'].document.on('keydown', function() {HideCopyButton();});
            }
        });

       {###################################################}
       {# Initialize the registrations with existing ones #}
       InitRegistrations();
       
       {###################################################}
       {# Initialize begin end dates time #}
       $('#event_begin_date,#event_begin_time_hour,#event_begin_time_minute,#event_end_date,#event_end_time_hour,#event_end_time_minute').on('change',function(){
           EventDateTimeChanged();
       });
       
       $('#event_end_time_hour').val(23);
       $('#event_end_time_minute').val(59);
       EventDateTimeChanged();

       {############################################}
       {# Unbind the events (reinit) #}
       $('#save_button').off();
       $('#save_button2').off();
       $('#copy_button').off();
       $( "#event_registrationallowed" ).off();
       $('#event_maxnumattendees').off();
        
       {############################################}
       {# Event for disabling/enabling registration system#}        
        $( "#event_registrationallowed" ).on("click", function(event){

                checked = ($(this).is(':checked'));
                if (!checked)
                    {
                        ModalDialog(HandleRegistrationAllowed, null, "{{'event.no_reservation.title'|trans}}", "{{'event.no_reservation.content.begin'|trans|raw}}{%if event.id != -1 %}{{'event.no_reservation.content.attendees_alert'|trans|raw}}{% endif %}{{'event.no_reservation.content.end'|trans|raw}}", "{{'event.no_reservation.yes'|trans}}", "{{'event.no_reservation.no'|trans}}");
                        return false;
                    }
                    else
                    {
                        $("#tabs").tabs({disabled: []});
                        return true;
                    }

        });
 
       {############################################}
       {# Handling the "copy" button #}
        $('#copy_button').on("click", function( e ){
            $("#copy_field").val(1); {# Setting value to 1 will make a copy #}
            DisableControls('eventform', true); {# !!! Re-enable controls before submission: if not, all fields will be empty!! #}
            $('#eventform').submit();
        });
        
       {############################################}
       {# Handling the "cancel" button #}
        {% if ( (event.id != -1) and ( event.end|date('U') > "now"|date('U') ) ) %} {# cancel only available for already existing event which are not passed #}
        $('#cancel_button').on("click", function( e ){
            ModalDialog(cancel_event, null, '{{'event.canceldialog.title'|trans}}', '{{'event.canceldialog.text'|trans}}', '{{'form.button.yes'|trans}}', '{{'form.button.no'|trans}}');           
        });
        {% endif %}

       {############################################}
       {# Making the form ajax #}
        AjaxForm( 'eventform', PrepareEventFormSubmission, save_event_callback);

        $('#save_button, #save_button2').click(function(){
         $('#eventform').submit();
        });
        
        {############################################}
        {# Detecting form change => hide the copy button if it is available #}
        $("#eventform :input").change(function() {
            HideCopyButton();
        });
        

       {############################################}
       {# Hiding the queue table #}
        $('#queue_table').hide();
        
       {############################################}
       {# Handling changes in the max number of attendees#}
        $('#event_maxnumattendees').on("change", function(event){
            UpdateInterface();
            });

       {############################################}
        {# Autocomplete user search field with ajax request #}
        {% if event.id == -1 or (event.end|date('U') > "now"|date('U')) %} {# only if it is not passed #}
    
        $( "#user_search" ).autocomplete({
              source: function( request, response ) {
                    $.ajax({
                      url: "{{ url('cpt_user_getsearchresult') }}",
                      type: "GET",
                      dataType: "json",
                      data: {
                        search_string: request.term
                      },
                      success: function( data ) {
                            response( $.map( data, function( user ) {
                                if (!(user.id in Registration_list)){ {# adding user in the result list only if not already contained #}
                                    return {
                                        id: user.id,
                                        username: user.username,
                                        value: user.id,
                                        label: user.username
                                    };
                                }
                              }));
                        }

                    });
              },
              minLength: 3,
              select: function( event, ui ) {  {# Selecting the user from the search list leads to adding the reservation object in the reservation_list #}
                reservation = CreateReservationFromUser(ui.item);
                AddReservationItem(reservation, false);
                UpdateInterface();
                $(this).val(''); return false;
              },
              open: function() {
                $( this ).removeClass( "ui-corner-all" ).addClass( "ui-corner-top" );
              },
              close: function() {
                $( this ).removeClass( "ui-corner-top" ).addClass( "ui-corner-all" );
              }
          });
          {% endif %}


        {############################################}
        {# Initialize adress field #}
        var address_num = $('#address_num').val();
        var address = $('#address').val();
        var country_name = $('#country_name').val();
        var country_code = $('#country_code').val();
        var postal_code = $('#city_postal_code').val();
        var city_name = $('#city_name').val();
        
        set_adress(address_num,address,postal_code,city_name,country_name,country_code);
        
        {############################################}
        {# Hide the placesearch error field #}
        $('#placesearch_error').hide();
        
        {############################################}
        {# Disable form controls if this is a past event (it is not editable anymore) #} 
        {% if event.id != -1 and (event.end|date('U') <= "now"|date('U')) %} {# only if it is not passed #}
        DisableControls('edit_event', false);
        $('#copy_button').removeAttr('disabled');
        show_event_usermessage('{{'event.info.thisisapastevent'|trans}}');
        {% endif %}
 
        {############################################}
        {# Show info message if existing future event #} 
        {% if event.id != -1 and (event.end|date('U') > "now"|date('U')) %} {# only if it is not passed #}
        show_event_usermessage('{{'event.info.existingevent'|trans}}');
        {% endif %}

        
       {################################################}
       {# Setting timer to check for event update #}
       //CheckEventWasUpdated();
    }
    
$(function() {

    InitializeEventPage();
//    UpdateGoogleMap();
  //  InitAutocomplete();


});
  
</script>